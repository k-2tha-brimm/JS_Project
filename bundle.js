!function(t){var e={};function s(i){if(e[i])return e[i].exports;var h=e[i]={i:i,l:!1,exports:{}};return t[i].call(h.exports,h,h.exports,s),h.l=!0,h.exports}s.m=t,s.c=e,s.d=function(t,e,i){s.o(t,e)||Object.defineProperty(t,e,{enumerable:!0,get:i})},s.r=function(t){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(t,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(t,"__esModule",{value:!0})},s.t=function(t,e){if(1&e&&(t=s(t)),8&e)return t;if(4&e&&"object"==typeof t&&t&&t.__esModule)return t;var i=Object.create(null);if(s.r(i),Object.defineProperty(i,"default",{enumerable:!0,value:t}),2&e&&"string"!=typeof t)for(var h in t)s.d(i,h,function(e){return t[e]}.bind(null,h));return i},s.n=function(t){var e=t&&t.__esModule?function(){return t.default}:function(){return t};return s.d(e,"a",e),e},s.o=function(t,e){return Object.prototype.hasOwnProperty.call(t,e)},s.p="",s(s.s=3)}([function(t,e,s){s(2);t.exports=class{constructor(t){this.pos=t.pos,this.vel=t.vel,this.color=t.color,this.height=t.height,this.area=this.height*this.width,this.width=t.width,this.game=t.game}draw(t){t.fillStyle=this.color,t.fillRect(this.pos[0],this.pos[1],this.width,this.height)}move(){this.pos[0]+=this.vel[0]}remove(){this.game.remove(this)}}},function(t,e,s){s(2);const i=s(0);t.exports=class extends i{constructor(t){super(t),this.pos=t.pos,this.color="lime",this.width=25,this.height=10,this.vel=t.vel||[0,0],this.area=this.height*this.width}moveShip(t){this.vel[0]=t[0]}}},function(t,e){const s={constructor(t,e){this.x=t,this.y=e},add:(t,e)=>new s(t.x+e.x,t.y+e.y),subtract:(t,e)=>new s(t.x-e.x,t.y-e.y),multiply:(t,e)=>new s(t.x*e,t.y*e),vecLength:t=>Math.sqrt(t.x*t.x+t.y*t.y),distance:(t,e)=>Math.sqrt(Math.pow(t[0]-e[0],2)+Math.pow(t[1]+e[1],2)),normalize:t=>new s(t.x/vectorLength(t),t.y/vectorLength(t))};t.exports=s},function(t,e,s){const i=s(1),h=s(0),o=s(4),n=s(8);document.addEventListener("DOMContentLoaded",()=>{const t=document.getElementById("game-canvas");t.width=600,t.height=720;const e=t.getContext("2d"),s=new o(t);new n(s,e);s.draw(e),document.getElementById("start").addEventListener("click",()=>{const s=new o(t),i=new n(s,e);s.draw(e),i.start()})}),window.PlayerShip=i,window.Entities=h},function(t,e,s){const i=s(1),h=s(5),o=s(6),n=s(7);class l{constructor(t,e){this.enemyShips=[],this.bullets=[],this.bombs=[],this.waveCount=0,this.enemiesAdded=!1,this.playerShip=null,this.gameBoard=t,this.playerLives=3,this.score=e||0,this.gameIsOver=!1,this.newRound=!1,this.bombs=[],this.addEnemies(),this.addPlayerShip(),this.registerEvents()}addPlayerShip(){this.playerShip=new i({pos:[300,650],vel:[0,0],height:20,width:40,color:"lime"})}add(t){this.enemyShips.push(t)}addBullet(t){this.bullets.push(t)}addBombs(t){this.bombs.push(t)}addEnemies(){let t=100;for(let e=5;e>1;e--){let s=40;for(let i=0;i<11;i++)this.add(new h({pos:[s,t],vel:[1,0],game:this,value:10*e})),s+=45;t+=35}this.enemiesAdded=!0}draw(t){const e=new Image;e.src="../assets/images/halo.jpg",e.onload=(()=>{t.drawImage(e,-500,0)}),t.font="30px Comic Sans MS",t.fillstyle="white",t.fillText(`Score: ${this.score}`,410,50),t.font="30px Comic Sans MS",t.fillstyle="white",t.fillText(`Lives: ${this.playerLives}`,20,50),this.enemyShips.forEach(e=>{e.draw(t)}),this.playerShip.draw(t),this.bullets.forEach(e=>{e.draw(t)}),this.bombs.forEach(e=>{e.draw(t)})}bombsAway(){const t=Math.floor(Math.random()*Math.floor(this.enemyShips.length)),e=this.enemyShips[t],s=[[e.pos[0]-10,e.pos[1]+13]];this.addBombs(new n(s))}checkCollisions(){for(let t=0;t<this.enemyShips.length;t++){let e=this.enemyShips[t],s=!1;for(let t=0;t<this.bullets.length;t++){const i=this.bullets[t];if(i.pos[0]>=e.pos[0]-e.width/2&&i.pos[0]<=e.pos[0]+e.width/2&&i.pos[1]>=e.pos[1]-e.height/2&&i.pos[1]<=e.pos[1]+e.height/2){this.bullets.splice(t--,1),s=!0;break}}s&&(this.score+=this.enemyShips[t].value,this.enemyShips.splice(t--,1),0===this.enemyShips.length&&(this.bullets=[],this.addEnemies(),this.addPlayerShip(),this.registerEvents())),this.bullets.forEach(t=>{t.pos[1]<0&&this.bullets.splice(this.bullets.indexOf(t),1)})}}moveObjects(){this.enemyShips.forEach(t=>{this.gameOver(t.pos)&&this.enemyShips.map(t=>{t.vel=[0,0]});this.isOutOfBounds(t.pos)?t.pos[0]<0?this.enemyShips.map(t=>{t.pos[1]+=30,t.pos[0]+=10,t.vel=[1,0]}):this.enemyShips.map(t=>{t.pos[1]+=30,t.pos[0]-=10,t.vel=[-1,0]}):t.move()}),this.bullets.forEach(t=>{t.pos[1]-=t.vel[1]}),this.bombs.forEach(t=>{console.log(t.pos[1]+t.vel[1]),t.pos[1]+=t.vel[1]}),this.bombs.length<2&&this.bombsAway()}registerEvents(){let t={x:0,y:0};document.addEventListener("keydown",e=>{if(37===e.keyCode)this.isOutOfBounds(this.playerShip.pos)?this.playerShip.vel[0]=-2:this.playerShip.pos[0]-=20;else if(39===e.keyCode)this.isOutOfBounds(this.playerShip.pos)?this.playerShip.vel[0]=2:this.playerShip.pos[0]+=20;else if(32===e.keyCode){const t=[this.playerShip.pos[0]+10,this.playerShip.pos[1]-13];this.bullets.length<7&&this.addBullet(new o(t))}this.playerShip.moveShip(t)})}isOutOfBounds(t){return t[0]<0||t[0]+25>=l.WIDTH}gameOver(t){return t[1]>620&&(this.gameIsOver=!0,!0)}remove(t){t instanceof h?this.enemyShips.splice(this.enemyShips.indexOf(t),1):t instanceof o&&this.bullets.splice(this.bullets.indexOf(t),1)}}l.NUM_ENEMIES=55,l.HEIGHT=720,l.WIDTH=600,t.exports=l},function(t,e,s){const i=s(0);t.exports=class extends i{constructor(t){super(t),this.pos=t.pos,this.vel=t.vel,this.width=25,this.height=12,this.color="white",this.game=t.game,this.area=this.height*this.width,this.value=t.value}}},function(t,e,s){const i=s(0);t.exports=class extends i{constructor(t){super(t),this.pos=t,this.vel=[0,1.5],this.height=6,this.width=3,this.color="white",this.area=this.height*this.width}}},function(t,e,s){const i=s(0);t.exports=class extends i{constructor(t){super(t),this.pos=t[0],this.vel=[0,1.6],this.height=5,this.width=2.5,this.color="white"}}},function(t,e){t.exports=class{constructor(t,e){this.ctx=e,this.game=t,this.playerShip=t.addPlayerShip}animate(){this.game.draw(this.ctx),this.game.moveObjects(),this.game.checkCollisions(),this.game.gameIsOver?document.getElementById("splash-page").style.display="flex":requestAnimationFrame(this.animate.bind(this))}start(){this.lastTime=0,requestAnimationFrame(this.animate.bind(this))}}}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,